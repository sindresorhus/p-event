import EventEmitter from 'events';
import test from 'ava';
import delay from 'delay';
import m from '.';

test('event to promise', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 'ðŸŒˆ');
	});

	t.is(await m(emitter, 'ðŸ¦„'), 'ðŸŒˆ');
});

test('error event rejects the promise', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('error', new Error('ðŸ’©'));
	});

	await t.throws(m(emitter, 'ðŸ¦„'), 'ðŸ’©');
});

test('`rejectionEvents` option', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('bar', new Error('ðŸ’©'));
	});

	await t.throws(m(emitter, 'ðŸ¦„', {
		rejectionEvents: ['foo', 'bar']
	}), 'ðŸ’©');
});

test('`multiArgs` option on resolve', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 'ðŸŒˆ', 'ðŸŒˆ');
	});

	t.deepEqual(await m(emitter, 'ðŸ¦„', {
		multiArgs: true
	}), ['ðŸŒˆ', 'ðŸŒˆ']);
});

test('`multiArgs` option on reject', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('error', 'ðŸ’©', 'ðŸ’©');
	});

	t.deepEqual(await m(emitter, 'error', {
		multiArgs: true
	}), ['ðŸ’©', 'ðŸ’©']);
});

test('`.cancel()` method', t => {
	const emitter = new EventEmitter();
	const promise = m(emitter, 'ðŸ¦„');
	t.is(emitter.listenerCount('ðŸ¦„'), 1);
	promise.cancel();
	t.is(emitter.listenerCount('ðŸ¦„'), 0);
});

test('`.cancel()` method with `timeout` option', t => {
	const emitter = new EventEmitter();
	const promise = m(emitter, 'ðŸ¦„', {timeout: 250});
	t.is(emitter.listenerCount('ðŸ¦„'), 1);
	promise.cancel();
	t.is(emitter.listenerCount('ðŸ¦„'), 0);
});

test('error on incompatible emitter', async t => {
	await t.throws(m({}, 'ðŸ¦„'), /not compatible/);
});

test('works with DOM events', async t => {
	const emitter = new EventEmitter();
	emitter.addEvenListener = emitter.addListener;
	emitter.removeEvenListener = emitter.removeListener;
	delete emitter.on;
	delete emitter.addListener;
	delete emitter.removeListener;

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 'ðŸŒˆ');
	});

	t.is(await m(emitter, 'ðŸ¦„'), 'ðŸŒˆ');
});

test('event to promise - error', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('error', new Error('ðŸ’©'));
	});

	t.deepEqual(await m(emitter, 'error'), new Error('ðŸ’©'));
});

test('`timeout` option rejects when short enough', async t => {
	const emitter = new EventEmitter();
	const timeout = 50;

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 'ðŸŒˆ');
	});

	await t.throws(m(emitter, 'ðŸ¦„', {
		timeout
	}), `Promise timed out after ${timeout} milliseconds`);

	t.is(emitter.listenerCount('ðŸ¦„'), 0);
});

test('`timeout` option resolves when long enough', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 'ðŸŒˆ');
	});

	t.is(await m(emitter, 'ðŸ¦„', {
		timeout: 250
	}), 'ðŸŒˆ');
});

test('filter function to match event', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 1);
		emitter.emit('ðŸ¦„', 2);
		emitter.emit('ðŸ¦„', 4);
		emitter.emit('ðŸ¦„', 3);
	});

	t.is(await m(emitter, 'ðŸ¦„', x => x >= 3), 4);
});

test('filter option to match event', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 1);
		emitter.emit('ðŸ¦„', 2);
		emitter.emit('ðŸ¦„', 4);
		emitter.emit('ðŸ¦„', 3);
	});

	t.is(await m(emitter, 'ðŸ¦„', {
		filter: x => x >= 3
	}), 4);
});

test('filter option caught with error', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 1);
		emitter.emit('ðŸ¦„', 2);
		emitter.emit('error', new Error('ðŸ’©'));
		emitter.emit('ðŸ¦„', 4);
		emitter.emit('ðŸ¦„', 3);
	});

	await t.throws(m(emitter, 'ðŸ¦„', {
		filter: x => x >= 3
	}), 'ðŸ’©');
});

test('filter option to match event with `multiArgs`', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 1, 1);
		emitter.emit('ðŸ¦„', 2, 2);
		emitter.emit('ðŸ¦„', 4, 3);
		emitter.emit('ðŸ¦„', 3, 4);
	});

	t.deepEqual(await m(emitter, 'ðŸ¦„', {
		filter: x => x[0] >= 3 && x[1] >= x[0],
		multiArgs: true
	}), [3, 4]);
});

test('filter option returned with `multiArgs`', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ðŸ¦„', 1, 1);
		emitter.emit('ðŸ¦„', 2, 2);
		emitter.emit('error', 10000, 'ðŸ’©');
		emitter.emit('ðŸ¦„', 4, 3);
		emitter.emit('ðŸ¦„', 3, 4);
	});

	t.deepEqual(await m(emitter, 'error', {
		filter: x => (x[0] > 9999) && (x[1] === 'ðŸ’©'),
		multiArgs: true
	}), [10000, 'ðŸ’©']);
});
