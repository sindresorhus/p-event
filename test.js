import EventEmitter from 'events';
import test from 'ava';
import delay from 'delay';
import m from '.';

test('event to promise', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ğŸ¦„', 'ğŸŒˆ');
	});

	t.is(await m(emitter, 'ğŸ¦„'), 'ğŸŒˆ');
});

test('error event rejects the promise', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('error', new Error('ğŸ’©'));
	});

	await t.throws(m(emitter, 'ğŸ¦„'), 'ğŸ’©');
});

test('`rejectionEvents` option', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('bar', new Error('ğŸ’©'));
	});

	await t.throws(m(emitter, 'ğŸ¦„', {
		rejectionEvents: ['foo', 'bar']
	}), 'ğŸ’©');
});

test('`multiArgs` option on resolve', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('ğŸ¦„', 'ğŸŒˆ', 'ğŸŒˆ');
	});

	t.deepEqual(await m(emitter, 'ğŸ¦„', {
		multiArgs: true
	}), ['ğŸŒˆ', 'ğŸŒˆ']);
});

test('`multiArgs` option on reject', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('error', 'ğŸ’©', 'ğŸ’©');
	});

	t.deepEqual(await m(emitter, 'error', {
		multiArgs: true
	}), ['ğŸ’©', 'ğŸ’©']);
});

test('`.cancel()` method', t => {
	const emitter = new EventEmitter();
	const promise = m(emitter, 'ğŸ¦„');
	t.is(emitter.listenerCount('ğŸ¦„'), 1);
	promise.cancel();
	t.is(emitter.listenerCount('ğŸ¦„'), 0);
});

test('error on incompatible emitter', async t => {
	await t.throws(m({}, 'ğŸ¦„'), /not compatible/);
});

test('works with DOM events', async t => {
	const emitter = new EventEmitter();
	emitter.addEvenListener = emitter.addListener;
	emitter.removeEvenListener = emitter.removeListener;
	delete emitter.on;
	delete emitter.addListener;
	delete emitter.removeListener;

	delay(200).then(() => {
		emitter.emit('ğŸ¦„', 'ğŸŒˆ');
	});

	t.is(await m(emitter, 'ğŸ¦„'), 'ğŸŒˆ');
});

test('event to promise - error', async t => {
	const emitter = new EventEmitter();

	delay(200).then(() => {
		emitter.emit('error', new Error('ğŸ’©'));
	});

	t.deepEqual(await m(emitter, 'error'), new Error('ğŸ’©'));
});
